#!/bin/bash
# SCRIPT_PURPOSE: Run configuration inside the docker container, after package install.
# Bash should be installed at this point.
# DUE_VERSION_COMPATIBILITY_TRACKING=1.0.0

# Copyright 2021 NVIDIA Corporation.  All rights reserved.
# Copyright 2019 Cumulus Networks, Inc.  All rights reserved.
#
#  SPDX-License-Identifier:     MIT

. /due-configuration/install-config-common.lib

# The default post install operations exist as a function
# for easy invocation (or not) in overriding scripts.
fxnPostInstallCommon


# Jessie apt has a bug where it tries to close 100K plus files.
# Set bash ulimit to max at 10000 to speed this up.
ulimit -n 10000

# Detect expired releases
if [[ "$NAME" = *Debian* ]];then
    # Useful for old distributions that throw expired key errors.
    # Though key update can be forced with: sudo apt-key adv --recv-keys
    # Debian 8 Jessie is the first of these tested.
    # NOTE:  --force-yes can apply the following:
    #  --allow-unauthenticated
    #  --allow-downgrades
    #  --allow-remove-essential
    # --allow-change-held-packages

    # VERSION_ID and VERSION variables are sourced from /etc/os-release
    # TIP: Debian Sid does not set VERSION_ID
    if [ "$VERSION_ID" != "" ] && [ $((VERSION_ID < 9 )) = 1 ];then
        APT_FAKE_TIME=" faketime "
        APT_FORCE_YES=" --force-yes "

        # Pretend to be an earlier date so keys are not yet expired.
        APT_FAKE_DATE="2017-01-01"
        # Ex: sudo faketime '2018-01-01 00:00:01' apt-get update

        # I suspect additional fake times will have to be
        # added.
        case $VERSION_ID in
            '8' )
                APT_FAKE_DATE="2017-01-01"
                ;;
            * )
                echo "ERROR! $0 Failed to set fake time for $VERSION. Exiting."
                exit 1
                ;;

        esac

        echo ""
        echo "WARNING: detected expired release $NAME $VERSION_ID "
        echo " APT install will use faketime and --force-yes in $0"
        echo ""
    fi
fi

#
# apt-get install development packages
# Note at this stage, any changes to the container's sources.list
# will have happened.
#

$APT_FAKE_TIME $APT_FAKE_DATE apt-get update

#
# As Python availability varies by release, try to install
# classic Python and python-six to support older releases.
# Print a success message if that worked and bury the error
# message if it failed so the user isn't alarmed by the
# retry for python3 and python3-six packages.
#
PYTHON_SIX_PACKAGE="python-six"
DEBIAN_FRONTEND=noninteractive \
               $APT_FAKE_TIME $APT_FAKE_DATE \
               apt-get install \
               --assume-yes \
               $APT_FORCE_YES \
               --no-install-recommends \
               python > /dev/null 2>&1
if [ $? = 0 ];then
    echo "Installed classic Python package."
else
    DEBIAN_FRONTEND=noninteractive \
                   $APT_FAKE_TIME $APT_FAKE_DATE \
                   apt-get install \
                   --assume-yes \
                   $APT_FORCE_YES \
                   --no-install-recommends \
                   python3
    # Newer Python = newer python six
    PYTHON_SIX_PACKAGE="python3-six"
fi
# Packages for kernel build, but not essential for Debian packaging
KERNEL_BUILD_PACKAGES=" build-essential rsync gcc bc bison cpio flex kmod quilt u-boot-tools $PYTHON_SIX_PACKAGE "

# Lintian checks code for errors or questionable implementations
# in Debian packaging. Adds about 12MB to the container size
# These were listed out, but dependencies vary with the version of
# Debian being run, so it is more robust to just list 'lintian'
# and let Apt sort out what to pull in
LINTIAN_PACKAGES=" lintian "

# If you expect to do development in the container, these are useful.
EDITORS="vim emacs-nox"

# Any packages that you always use
NICE_TO_HAVE=" tree "

#
# Packages included by variables are optional.
# They can be removed and packages should still build, if storage
# space is a concern.
#
DEBIAN_FRONTEND=noninteractive \
               $APT_FAKE_TIME $APT_FAKE_DATE \
               apt-get install \
               --assume-yes \
               $APT_FORCE_YES \
               --no-install-recommends \
               openssh-server \
               iputils-ping \
               devscripts \
               git \
               x11-xkb-utils \
               equivs \
               $KERNEL_BUILD_PACKAGES \
               $LINTIAN_PACKAGES \
               $EDITORS \
               $NICE_TO_HAVE \
               apt-utils \
               dpkg-dev  || exit 1

#
# Check for any local software to install.
# This code is responsible for being smart enough to handle
# the format of whatever is found.
#
if [ -d /due-configuration/post-install-local ];then
    cd /due-configuration/post-install-local
    #
    # As debs are the only post install currently supported,
    # list them if present and install. Otherwise, ignore.
    ls *.deb 2> /dev/null
    if [ $? = "0" ];then
        echo "Post installing local software:"
        # Install packages (expect dependency errors)
        sudo dpkg -i *.deb
        # Resolve dependency errors with --fix-broken
        DEBIAN_FRONTEND=noninteractive \
                       $APT_FAKE_TIME $APT_FAKE_DATE \
                       apt-get install \
                       --assume-yes \
                       $APT_FORCE_YES \
                       --fix-broken || exit 1
        echo "Post installing local software: DONE"
    fi
fi


echo "Done $0"
