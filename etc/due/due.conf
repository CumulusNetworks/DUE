#!/bin/bash  syntax
# Configurable variables for Dedicated User Environment (DUE)
# DUE VERSION: 4.0.0

# Set to TRUE in /etc/due/due.conf to allow DUE to read users
# ~/.config/due/due.conf files
DUE_ALLOW_USER_CONFIG="FALSE"

#
# Specify the default home directory to mount
#  Save it in DUE_ENV_DEFAULT_HOMEDIR
#
# Default:  ~/
# Command line options (--home-dir ) will override it.

# The home directory can be dynamically determined at startup,
#     by assigning shell command results to a Bash varaible
# Extreme use case example:
#     Different build servers that all mount the user's homedir,
#     but have local workspace directories of the form
#     /work/<hostname>/<username> will be handled with:
# DUE_ENV_DEFAULT_HOMEDIR=/work/$(hostname)/$(whoami)

# Limit the number of containers a user can have running at one time.
# People tend to forget what they've got running on a multi-user system.
DUE_USER_CONTAINER_LIMIT=10

# Apply per-container localization arguments.
#
# This allows a user (or a system) to set any additional arguments
# to pass to Docker when starting a container, such as --privileged,
# an additional mount point, or an additional /etc/hosts entry.

# Takes: String identifying the type of DUE container
# Does:  Sets CONTIANER_SPECIFIC_ARGS, if needed.
#
function fxnSetContainerSpecificArgs()
{
    local imageType="$1"
    # uses the value set by the DUEImageType label from
    # the particular template directory's Dockerfile.config
    # Example: LABEL DUEImageType=no-op-image

    case $imageType in
        "no-op-image" )
        # Example: Mount current directory under /build in the container.
        #  Useful if this is invoked by an automated build system
        #  that builds outside the home directory hierarchy
        #  if [ -e /build ];then
        #  CONTAINER_SPECIFIC_ARGS+="  --volume $(dirname $(pwd)):/build "
        #  fi

        # Example: Always mount the host's /var/www/html directory.
        # if [ -e /var/www/html ];then
        #  CONTAINER_SPECIFIC_ARGS+=" --volume /var/www/html/:/var/www/html/"
        # fi

        # Example: Always run this type of container as --privileged "
        #  CONTAINER_SPECIFIC_ARGS+=" --privileged "

        # Pass an IP address for redhat-local-mirror at run time
        # HAS_LOCAL_MIRROR="$( grep redhat-local-mirror /etc/hosts | awk '{print$1}' )"
        #if [ "$HAS_LOCAL_MIRROR" != "" ];then
        #     CONTAINER_SPECIFIC_ARGS+=" --add-host redhat-local-mirror:$( grep redhat-local-mirror /etc/hosts | awk '{print$1}' ) "
        #fi
        ;;

    esac

}
