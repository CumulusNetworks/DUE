.\" Automatically generated by Pandoc 2.2.1
.\"
.TH "DUE" "1" "" "Version 1.0" "Docker User Environment"
.hy
.SH NAME
.PP
\f[B]DUE\f[] \[em] Docker User Environment.
A build environment for your build environments.
.SH SYNOPSIS
.PP
\f[B]due\f[] [\f[B]\-r|\[en]run\f[] \f[I]args\f[]] [\f[I]dedication\f[]]
.PD 0
.P
.PD
\f[B]due\f[] [ \f[B]\[en]create\f[] \f[I]args\f[] ]
[\f[I]dedication\f[]]
.PD 0
.P
.PD
\f[B]due\f[] [\f[B]\-m\f[]|\f[B]\[en]manage\f[] \f[I]args\f[]]
[\f[I]dedication\f[]]
.PD 0
.P
.PD
\f[B]due\f[] [\f[B]\-v\f[]|\f[B]\[en]version\f[]]
.PD 0
.P
.PD
\f[B]due\f[] [\f[B]\-h\f[]|\f[B]\[en]help\f[]]
.SH DESCRIPTION
.PP
DUE is a set of wrapper scripts for both creating Docker container based
build environments, and running them with intelligent defaults so that
the user can feel like they are still on the host system.
.PP
Key features include:
.PP
1 \- Creating an account in the container for the user at run time and
mounting the user's home/work directory so configuration files are
available.
.PP
2 \- List based browsing of images to run and active containers to log
in to.
.PP
3 \- Use of container `templates' to preconfigure and build containers
for a particular target or Debian based operating system, eliminating
errors caused by missing dependencies, or misconfiguration.
.PP
4 \- Commands can be run using the container without having to log into
it, allowing for use in automated build environments.
.SS Functional Options
.PP
Each of these options has context specific help and sub commands
.TP
.B \-r, \[en]run
Start new containers.
.RS
.RE
.TP
.B \[en]build
Execute container's /usr/local/bin/duebuild script in current directory.
See the \[en]run section for more.
.RS
.RE
.TP
.B \[en]create
Make and configure new Docker images.
.RS
.RE
.TP
.B \-m, \[en]manage
Manipulate and query existing images.
.RS
.RE
.TP
.B \-h, \[en]help
Usage information.
.RS
.RE
.TP
.B \-v, \[en]version
Print DUE's version number.
.RS
.RE
.SS \[en]run options
.PP
These options are available after the \[en]run argument, and relate to
starting and logging in to containers.
.SS Starting an image
.TP
.B \-i, \[en]run\-image [filter]
Allows the user to reduce the number of images shown to run by
restricting them to entries that contain [filter].
If only one image matches the filter, it will be invoked without asking
the user to choose it.
.RS
.RE
.TP
.B \-a, \[en]all
Show all containers on the system.
DUE can be used to log in to containers that it did not create, but the
user may have to supply a default \[en]username and \[en]userid (usually
\[en]username root and \[en]userid 0.
See below )
.RS
.RE
.TP
.B \[en]ignore type
.IP
.nf
\f[C]
\ When\ accessing\ the\ container,\ do\ not\ attempt\ to\ create\ a\ user
\f[]
.fi
.RS
account for the user logging in, and assume the container was not
created by DUE.
This can be useful with image creation debug.
.RE
.TP
.B \-c, \[en]command [cmd]
Run [cmd] in the container using the \[en]login\-shell.
This must be the last command parsed, as [cmd] is handed off to be run
in the container.
The primary use of this would be using the container to build without
having to interactively log in to it.
.RS
.RE
.PP
Note: when issuing multiple commands, remember to "" your arguments, and
backslash () any semicolons (;) used to split up the commands.
Otherwise the shell where the commands are invoked will take anything
after the first ;, and treat it as a command to be run locally.
.PP
This can obfuscate things if the command can work inside or out of the
container.
.PP
Example: look at /proc and the password file in a container: ./due
\[en]run \[en]command \[lq]ls \-lrt /proc\[rq] ; \[lq]cat
/etc/passwd\[rq]
.TP
.B \[en]build
If there is a /usr/local/bin/duebuild script in the container, this
option will run it with a default configuration, or take additional
passed arguments if present.
Those arguments will vary depending on the nature of the target being
built by the container's duebuild script.
For more information, check the template/README.md for the image type,
or type: \[en]run \[en]build help to get the container's duebuild
script's help options directly.
.RS
.RE
.TP
.B \[en]debug
Sets defaults of \[en]username root \[en]userid 0 and the \[en]any
option to show images that were not created by DUE.
Helpful for internal debug if image creation dies running internal
configuration scripts.
.RS
.RE
.TP
.B \[en]container\-name name
Change the name of the running container.
This can provide clarity in a build automation environment, where
containers may be automatically spun up.
Note that if the new name does not have `due' in it, it will be filtered
out from DUE's \[en]login option unless \[en]all is also provided.
This may or may not be desirable behavior.
.RS
.RE
.TP
.B \[en]home\-dir [host path]
Absolute path to a directory to use as the home directory when the user
logs in.
Defaults to the user's home directory unless overridden with this
argument, or set otherwise in /etc/due/due.conf, or
~/config/due/due.conf
.RS
.RE
.TP
.B \[en]mount\-dir [hp:cp]
Mount absolute path on host system (hp) at absolute path in container.
The colon (:) is necessary to separate the two.
Multiple \[en]mount\-dir commands can be used in a single invocation.
Example: mount host /tmp dir in container /var/build: \[en]mount\-dir
/tmp/:var/build
.RS
.RE
.SS Logging in to a running container
.TP
.B \-l, \[en]login
Choose an existing container to log in to
.RS
.RE
.TP
.B \[en]username [username]
Name to use when logging in.
.RS
.RE
.TP
.B \[en]userid [id#]
User ID to use when logging in.
.RS
.RE
.TP
.B \[en]groupname [groupname]
Container user's default group
.RS
.RE
.TP
.B \[en]groupid [id#]
ID of container user's group
.RS
.RE
.TP
.B \[en]login\-shell [path]
Program to use as login
.RS
.RE
.TP
.B \[en]help\-runtime
Invoke runtime help
.RS
.RE
.TP
.B \[en]help\-runtime\-examples
Show examples of use
.RS
.RE
.SS \[en]create options
.PP
These options are accessed after the \[en]create argument, and,
predictably enough, relate to creating new images.
.SS Creation Overview
.PP
Containers created by DUE will always have files from
\&./templates/common\-templates in every image.
The primary example of this is the \f[B]container\-create\-user.sh\f[]
script that sets up an account for the user in the container, and allows
commands to be run in the container as if it was the user invoking them.
.PP
The order of creation is as follows, using the debian\-package template
as an example, where the resulting image will be named
`debian\-package\-10'
.PP
1 \- The contents of common\-templates are copied to a
debian\-package\-10\-template\-merge directory under
\&./due\-build\-merge/ 2 \- The contents of the debian\-package template
directory copied in to the debian\-package\-10\-template\-merge
directory and will overwrite any files with identical names.
3 \- Any REPLACE_* fields in the *template files are replaced with
values supplied from the command line (such as the starting container
image) and all files are copied to
\&./due\-build\-merge/debian\-package\-10 4 \- The
\&./due\-build\-merge/debian\-package\-10/Dockerfile.create file is used
to create the image from this build directory.
.SS Creation tips
.PP
Quick image changes can be made by editing the build directory (
\&./due\-build\-merge/debian\-package\-10 ) and re running ./due
\[en]create \[en]build\-dir ./due\-build\-merge/debian\-package\-10
.PP
The final image will hold a /due\-configuration directory, which holds
everything that went into the image.
This is very useful for install script debug inside the container.
.SS Creation example
.PP
1 \- Configure an image build directory under due\-build\-merge named
from \[en]name Mandatory:
.TP
.B \[en]from [name:tag]
Pull name:tag from registry to use as starting point for the image.
.RS
.RE
.TP
.B \[en]use\-template [role]
Use files from templates/[role] to generate the config directory.
.RS
.RE
.TP
.B \[en]description \[lq]desc\[rq]
Quoted string to describe the container on login.
.RS
.RE
.TP
.B \[en]name name
Name for resulting image and config directory.
Ex: debian\-stretch\-build, ubuntu\-18.04\-build, etc
.RS
.RE
.PP
Optional:
.TP
.B \[en]prompt [prompt]
Set in container prompt to [prompt] to provide user context
.RS
.RE
.TP
.B \[en]no\-image
With \[en]create, allow directories to be created, but do not try to
build the image.
Effectively stops use of \[en]dir.
Useful for debugging directory configuration issues.
.RS
.RE
.PP
2 \- Build a Docker image from the image build directory.
.TP
.B \[en]dir [dirname]
Build using an existing configuration directory.
.RS
.RE
.TP
.B \[en]clean
Delete the due\-build\-merge staging directories.
.RS
.RE
.SS \[en]manage options
.PP
These options are accessed after the \[en]manage argument, and can make
working with containers/images easier.
.TP
.B \-l, \[en]list\-images
List images created by DUE.
.RS
.RE
.TP
.B \[en]stop 
Use the menu interface to stop a running container.
Works with \[en]all to show containers not started by the user.
If is supplied, it will match all the user's containers to that pattern
and produce a script that can be edited and run to delete the listed
containers.
NOTE: \[en]all \[en]stop can be used to do some serious damage.
NOTE: since all DUE containers are started with \-rm, stopping a
container deletes it and all the data in it from memory.
.RS
.RE
.TP
.B \[en]snapshot name
Save a running container as a Docker image named name.
.RS
.RE
.TP
.B \[en]copy\-config
Create a personal DUE configuration file in ~/.config/due/due.config
.RS
.RE
.TP
.B \[en]make\-dev\-dir [dir]
Populate a local directory for DUE container development.
.RS
.RE
.TP
.B \[en]list\-templates
List available templates.
.RS
.RE
.TP
.B \[en]delete\-matched [term]
Delete containers that contain this term.
USE WITH CAUTION!
.RS
.RE
.TP
.B \[en]docker\-clean
Run `docker system prune ; docker image prune' to reclaim disk space.
.RS
.RE
.TP
.B \[en]help\-examples
Examples of using management options.
.RS
.RE
.SH FILES
.TP
.B \f[I]/etc/due/due.conf\f[]
Global configuration file
.RS
.RE
.TP
.B \f[I]~/.conf/due/due.conf\f[]
Per\-user default configuration file.
Overrides the global one.
\f[C]due\ \-\-manage\ \-\-copy\-config\f[] will set that up for the
user.
.RS
.RE
.SH ENVIRONMENT
.PP
The configuration file sets up the following variables:
.PP
\f[C]DUE_ENV_DEFAULT_HOMEDIR\f[] \- evaled to define the user's home
directory.
This can be useful if there is a naming convention for work directories
on shared systems.
.PP
\f[C]DUE_USER_CONTAINER_LIMIT\f[] \- limit the number of containers a
user is allowed to run.
Handy on a shared system to remind people of what they have running.
This can easily be circumvented, though.
.SH BUGS
.PP
See GitHub Issues: [https://github.com/[ehdoyle]/[DUE]/issues]
.SH AUTHOR
.PP
Alex Doyle <alexddoyle@gmail.com>
.SH COPYRIGHT
.PP
SPDX\-License\-Identifier: MIT
.PP
Copyright (c) 2019 Cumulus Networks, Inc.
.PP
Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the
\[lq]Software\[rq]), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge,
publish, distribute, sublicense, and/or sell copies of the Software, and
to permit persons to whom the Software is furnished to do so, subject to
the following conditions:
.PP
The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.
.PP
THE SOFTWARE IS PROVIDED \[lq]AS IS\[rq], WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
.SH SEE ALSO
.PP
\f[B]due.conf(4)\f[]
